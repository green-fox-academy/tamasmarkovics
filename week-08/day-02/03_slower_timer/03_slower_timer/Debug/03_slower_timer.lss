
03_slower_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c9  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009b  00000000  00000000  0000022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cf  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000162  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:

void init()
{
	// Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
	// With this you also set the clock source to CLK_io and you will also turn on the timer!
	TCCR0B = 0b00000101;
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	85 bd       	out	0x25, r24	; 37
	// Set the PB5 LED pin to output
	DDRB = 0b00101111;
  84:	8f e2       	ldi	r24, 0x2F	; 47
  86:	84 b9       	out	0x04, r24	; 4
  88:	08 95       	ret

0000008a <main>:
}

int main(void)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	1f 92       	push	r1
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	// Create a variable which will be a counter variable, initialize it with 0.
	volatile uint8_t count = 0;
  94:	19 82       	std	Y+1, r1	; 0x01
	// This will be the maximal value of our counter
	uint8_t cntr_max = 30;

	// Don't forget to call the init function!
	init();
  96:	0e 94 40 00 	call	0x80	; 0x80 <init>
	
	while (1)
	{
		if ((TIFR0 & 0b00000001) == 0b00000001) {
			count++;
			TIFR0 = 0b00000001;
  9a:	91 e0       	ldi	r25, 0x01	; 1
		}

		if (count == cntr_max) {
			PINB = 0b0101111;
  9c:	2f e2       	ldi	r18, 0x2F	; 47
	// Your task is to create about 1Hz flashing LED with the TC0 timer.
	// Use the counter variable, cntr_max and the overflow flag as a hint.
	
	while (1)
	{
		if ((TIFR0 & 0b00000001) == 0b00000001) {
  9e:	a8 9b       	sbis	0x15, 0	; 21
  a0:	04 c0       	rjmp	.+8      	; 0xaa <main+0x20>
			count++;
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	89 83       	std	Y+1, r24	; 0x01
			TIFR0 = 0b00000001;
  a8:	95 bb       	out	0x15, r25	; 21
		}

		if (count == cntr_max) {
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	8e 31       	cpi	r24, 0x1E	; 30
  ae:	b9 f7       	brne	.-18     	; 0x9e <main+0x14>
			PINB = 0b0101111;
  b0:	23 b9       	out	0x03, r18	; 3
			count = 0;
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	f4 cf       	rjmp	.-24     	; 0x9e <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
